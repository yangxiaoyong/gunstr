fork
exec

process management
==================

process creation
=================
The underlying mechanism is the same for user-space tasks and kernel task, a
as both rely on a function called `do_fork` to create the new process
In the case of creating a kernel thread, the kernel calls a function called
`kernel_thread`, then calls `do_fork`

In user-space, a program calls `fork` which results in a system call to the kernel function

vfork()     fork()
   |         |                            User-space
---|---------|---------------------------------------
   |         |
sys_vfork() sys_fork() sys_clone()  kernel_thread()
   |         |           |            |
    \        |           /           /
      \      |          /          /
        \    |     ____/_________/
          do_fork()
             |                              Kernel
             |
        copy_process()

`copy_process` function is where the new process is created as a copy of the
parent. This function performs all actions except for starting the process,
which will handled later>

process scheduling
==================

process destruction
===================
Process destruction can be driven by serveral events - from process termination, through a signal, or though a call to the `exit` function.
However process exit is driven, the process ends through a call to the kernel fuction `do_exit`(available in linux/kernel/exit.c).

                  exit()        User-space
--------------------|-----------------------
fatal signal   sys_exit()
            \       |
              \     |           Kernel
              do_exit()

do_exit:
  1. setting the process `PF_EXITAING` flag
  2. call exit_mm to remove memory pages
  3.

Inter-Process Communication
1. Signals - Sent by other process or the kernel to a specific process to indicate various conditions
2. Pipes - Unnamed pips set up by the shell normally with the "|" character to route output from one program to the input of another
3. FIFOS - Named pipes operating on the basic of the first data in, first data out.
4. Message queues - Message queues are mechanism set up to allow one or more process to write message that can be ready for one or more other processes.
5. Semaphores - Counters that are used to control access to shared resoures. These counters are used as a locking mechanism to prevent more than one process from using the resource at a time.
6. Shared memory - The mapping of a memory area to be shared by multiple process.

Message queues, semaphores, and shared memory can be accessed by the processes if they have access permission to the resource as set up by the object's creator. The process must pass an identifier to the kernel to be able to get the access.

SIGNALS
+++++++
process can ignore, block , or catch all signals except SIGSTOP and SIGKILL
If a process catches a signal, it means that it includes code that will take appropriate action when the signal is received. If the signal is not caught by the process, the kernel will take default action for the signal

FIFOS
+++++
FIFOS are permanent objects and can be created using the mkfifo() or mknod() command. Inside the program, the FIFO can be created using the mknod command, then opened and read from or written to just like a normal file. The FIFO is normally in blocking mode when attempting to perform read operations

ZombiesProcess
+++++++++++++++
What are these zombies process that show up in ps? I kill them but they dont' go away!

Zombies are dead process, you can't  kill the dead. All process eventually die, and when then do they become zombies. Then consume almost no resoures,
which is to be expected because they are dead! The reason for zombies is so
the zombies's parent(process) can retrieve the zombies's exit status and resource usage stastistics. The parent signals the operating system that it no
longer needs the zombies by using one of the `wait()` system calls

when a process dies, it's child processes all become children of process number 1, which is the init process, Init is ``always`` watting for children to die, so that they don't remain as zombies

If you have zombies process it means thoses zombies have not been waited for by their parent(look at PPID displayed by ps -l). You have three choices:
1. Fix the parent process(make it wait)
2. kill the parent
3. live with it.
Rember that living with it is not so hard because zombies take up little more than one extra line in the output of `ps`.


