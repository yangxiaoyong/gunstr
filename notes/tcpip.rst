TCP/UDP
=======
TCP的三路握手
TCP的连接终止序列
TCP的TIME_WAIT状态
套接字层的TCP和UDP缓冲机制

- TCP: 传输控制协议。TCP是一种面向连接的协议。它给用户进程提供可靠的全双工的字节流。
  TCP套接字是字节流套接字（stream socket）的一种。TCP关心确认，超时和重传等具体细节。
  大多数因特网应用程序使用TCP。
- UDP: 用户数据报协议。UDP是一种无连接协议。
  UDP套接口是数据报套接口(stream socket)的一种。与TCP不同，UDP不能保证每一UDP数据报
  可以到达目的地。
- ICMP: 网际控制消息协议.ICMP处理路由器和主机间的错误和控制消息。这些消息一般由TCP/IP
  网络软件（而不是用户进程）产生和处理，例如PING
- IGMP: 网际组管理协议。IGMP用于多播，它在IPv4是可选的。
- ARP: 地址解析协议。ARP把IPv4地址映射到硬件地址(以太网地址)。
  ARP一般用于广播地址，如以太网，令牌环网和FDDI，但不用于点对点网络
- RAPR: 反向地址解析协议。RARP把硬件地址映射到IPv4地址。
  它有时用于无盘节点，如引导时的X终端
- ICMPv6: 网际控制消息协议，版本6，综合了ICMPv4,IGMP和ARP的功能
- BPF: BSD分组过滤器。它为进程提供访问链路层数据的接口。一般在源自Berkeley的内核中
  可以找到它
- DLPI: 数据链路提供者接口。这是提供访问数据链路的接口，一般由SVR4

UDP
+++
- 简单, RFC768 [Postel 1980]
- 缺乏可靠性,不能确保UDP数据最终可到达目的地
- 每个UDP数据报都有一定的长度，我们可以认为一个数据报就是一个记录
- 无连接的服务

TCP
+++
- 提供客户端与服务器的连接
- 提供可靠性. 当TCP向另一端发送数据时，它要求对方返回一个确认。如果确认没有收到，TCP
  会自动重传数据并等待更长的时间。在数次重传失败后，TCP才放弃
- TCP通过给发送数据的每一个字节关联一个序列号进行排序
- TCP提供流量控制.TCP 总是告诉对方它能接收多少自己的数据，这称为通告窗口（advertised window）
- TCP是全双工的。这意味着在给定的连接上应用进程在任何时刻即可以发送也可以接收数据。
  因此，TCP必须跟踪每个方向数据流的状态信息，如序列号和通告窗口的大小

TCP连接的建立和终止
+++++++++++++++++++
了解如何建立和终止TCP连接以及TCP的状态转换图

建立一个TCP连接
---------------
三路握手(three-way hand shake):
  1. 服务器必须准备接受外来的连接。这通过调用socket,bind和listen函数来完成，这成为被动
     打开
  2. 客户端通过调用connect进行主动打开（active open）。这引起客户端TCP发送一个SYNC分节
     （表示同步），它告诉服务器客户将在（待建立的）连接中发送的数据的初始序列号。一般
     情况下SYN分节不携带数据，它只含有一个IP头部，一个TCP头部及可能有的TCP选项
  3. 服务器必须确认客户的SYN，同时自己也得发送一个SYN分节，它含有服务器将在同一连接中
     发送的数据的初始序列号。服务器将以单个分节向客户端发送SYN和对客户SYN的ACK
  4. 客户端必须确认服务器的SYN

常用的TCP选项
 - MSS: TCP 发送的SYN中带有这个选项是通知对方它的最大分段大小(maximum segment size),
   即它能接受的每个TCP分段中最大的数据量
 - 窗口规模选项。TCP双方能够通知对方的最大窗口大小是65535，因为TCP头部相应的字段只占1
   位。这个选项的TCP头部通知窗位必须能左移0-14位因此能提供的最大窗口几乎是1G字节(65535x 2^^14)
 - 时间戳选项。这个选项对高速连接是必须的，它可以防止失而复得的分组可能造成的数据损坏

长胖管道(long fat pipe): 一个高带宽长延迟的网络

TCP连接终止
-----------
TCP用三个分节建立一个连接，终止一个连接则需要四个分节
 1. 某个应用进程首先调用close,我们称这一端执行主动关闭（active close）。这一端的TCP于
    是发送一个FIN分节，表示数据发送完毕
 2. 接收到FIN的另一端执行被动关闭(passive close)。这个FIN由TCP确认。它的接收也作为文件
    结束符传递给接收方应用程序（放在已排队等候该应用进程接收的任何其它数据之后），因为
    FIn的接收意味着应用进程在相应的连接再也接收不到额外的数据
 3. 一段时间后，接收到文件结束符的应用进程调用close关闭它的套接字。这导致它的TCP也发送
    一个FIN
 4. 接收到这个FIN的原发送方TCP(执行主动关闭的那一端)对它进行确认。

因为每个方向都需要有一个FIN和一个ACK，所以一般需要四个分节

TCP状态转换图
-------------

TIME_WAIT状态
-------------
这个状态的持续时间是最长分节生命期MSL(maximum segment lifetime)的二倍。有时称为2MSL
存在的理由
1. 实现终止TCP全双工连接的可靠性
2. 允许老的重复字节在网络中消失
