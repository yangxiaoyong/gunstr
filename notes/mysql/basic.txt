==============
数据库设计概论
==============

数据表类型
==========
MyISAM, InnoDB, HEAP
默认的数据表类型由MySQL配置文件里的default-table-type选项决定

MyISAM
++++++
特点: 成熟，稳定和易于管理；
这种数据表类型在MySQL内部又细分以下二种
  - MyISAM Static (静态MyISAM): 如果数据表里的数据列各自都有预先定义好的固定长度，
    MySQL服务器将自动选择这种数据表类型。
    存取效率高，即便是非常频繁的读写，安全性相当高

  - MyISAM Dynmaic (动态MyISAM): 如果在数据表里的定义有且只有一个VARCHAR,xxxTEXT或
    xxxBLOB字段，MySQL会自动选择这种数据表类型，与静态MyISAM类型相比，这种类型的
    突出优点是数据表的空间需求量往往小得多：存储字符串和二进制对象所需要的字节数仅仅
    是它们的实际长度（再加上几个字节的开销）
    缺点: 数据记录很可能都不是同样的长度，这样一来，如果记录被修改了，它们在数据库文件里的存储位置就可能发生变化并在原先的位置留下一个空洞。于是，在数据库文件里，同一条
记录的哥哥字段不一定是存储在一个连续的字节里，而是会散步在各处，当被编辑的数据表变得
越来越碎片化时，数据的存取时间就会变得越来越长，因此，这种类型的数据表要人们经常的使用SQL命令OPTIMIZE TABLE 或者某个优化工具来进行碎片整理

  - MyISAM Compressed:
    动态和静态的MyISAM都可以被myisamchk工具压缩，
    效果： 使数据表空间占用量减少到原来的一半以下(以数据表的具体内容有关)
    压缩后，数据表变为只读

InnoDB
++++++
增加的功能
 1. 事物
 2. 数据行级锁定机制： InnoDB数据表的驱动程序使用的是它自己内建的数据行级锁定机制
 3. 外键约束条件。
 4. 崩溃恢复
缺陷:
 1. 表空间的管理: InnoDB数据表驱动把所有的数据和索引都保存在一个表空间里，表空间只能增大不能减小
 2. 数据记录的长度: InnodDB数据表中单条数据记录最多可以占用8000个字节的空间。这一限制并不包括TEXT和BLOB数据列，它们只有前512个字节是随其他数据列一起存储在数据库里的，超过
这个长度的数据将被存放在表空间的其他页面。
 3. 存储空间
 4. 全文索引： InnoDB不支持全文索引
 5. GIS 数据: 不能保存
 6. COUNT 问题： 因为支持事物，计数会比MyISAM慢
 7. 数据表锁定:  尽量避免使用 LOCK TABLE ... READ/WRITE 而应该使用 SELECT ... IN SHARE MODE 或 SELECT ... FOR UPDATE ，

数据类型
++++++++

整数
-----
INTEGER
UNSIGNED INTEGER
TINYINT -128~+127
UNSIGNED TINYINT 0-255
SMALLINT 16位，2个字节, -32768 ~+ 32767
MEDIUMINT 24 位，3个字节， -8388608 ~+ 8388607
INT(m)    32位，4个字节，-2147483648~+2147483647
BIGINT(m) 64位, 8个字节， +- 9.22*10**18
SERIAL    BIGINT AUTO_INCREMENT NOT NULL PRIMARY_KEY 的简写

在一个整数字段的定义里，可以选择为它定义一个数据列宽度，比如INT(4)。 Maximum Display Width 最大显示宽度

日期和时间
----------
DATE   2003-12-32 的格式,取值范围 1000-01-01~9999-12-32 (3个字节)
TIME   23:59:50的格式,取值范围: 正负 838:59:59 (三个字节)
DATETIME '2003-12-32 23:59:59' DATE + TIME 的组合
YEAR    年份,取值范围 100~2155(1个字节)

TIMESTAMP  的变体
CURRENT_TIMESTAMP (%y-%m-%d %H:%m%s)
TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP:
  在创建新记录和修改现有记录时都对这个数据列进行刷新
TIMESTAMP DEFAULT CURRENT_TIMESTAMP
TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
TIMESTAMP DEFAULT 'yyyy-mm-dd hh:mm:ss' ON UPDATE CURRENT_TIMESTAMP

字符串
------

数据库设计要求
--------------
- 数据表里没有重复冗余的数据
- 数据表里没有order1,order2,order3等数据列
- 全体数据表的空间占用量越小越好
- 使用频率高的数据库查询都能以简单高效的方式执行。

第一范式
 - 内容相似的数据列必须消除（消除的办法是再创建一个数据表来存放他们）
 - 必须为每一组相关数据分别创建一个数据表
 - 每条数据记录必须使用一个主键来标识
第二范式
 - 只要数据里的内容出现重复，就意味着应该把数据表拆分为多个子表
 - 拆分形成的数据表必须用外键关联起来
第三范式
 - 与主键没有直接关系的数据列必须消除（消除的版饭是再创建一个数据表来存放它们）

